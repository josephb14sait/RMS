@page "/reservation"
@using RMS.Data
@inject RMS.Data.ReservationService ReservationService
@inject DatabaseContext DbContext

<h2>Make a Reservation</h2>
@*Divs for user input*@
<div class="form-group">
    <label for="customerName">Customer Name</label>
    <InputText id="customerName" class="form-control" @bind-Value="customerName" />
</div>

<div class="form-group">
    <label for="date">Date</label>
    <InputDate id="date" class="form-control" @bind-Value="reservationDate" />
</div>

<div class="form-group">
    <label for="numberOfPeople">Number of People</label>
    <InputNumber id="numberOfPeople" class="form-control" @bind-Value="numberOfPeople" />
</div>

<button type="button" class="btn btn-primary" @onclick="HandleSubmit">Submit</button>

@*created for extra line space*@
<p> </p>
<h4>Current Reservations</h4>

@*foreach displays list once reservations are added to list*@
<ul class="list-group">

    @foreach (var reservation in reservations)
    {
        <li class="list-group-item">
            <strong>@reservation.CustomerName</strong><br />
            Date and Time: @reservation.ReservationDateTime.ToString("f")<br />
            Number of People: @reservation.NumberOfPeople
        </li>
    }
</ul>

@code {
    //declaring varibles and lists for reservation
    private string? customerName;
    private DateTime reservationDate = DateTime.Today;
    private int numberOfPeople;
    private List<RMS.Data.Reservation> reservations = new List<RMS.Data.Reservation>();

    //checking for exceptions and creating orders once submit button is pressed
    private void HandleSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(customerName))
            {
                throw new InvalidOperationException("Customer name is a required field.");
            }

            if (numberOfPeople <=0 || numberOfPeople > 20)
            {
                throw new InvalidOperationException("Enter a proper number");
            }

            //creates new reservation object from user input
            var reservation = new RMS.Data.Reservation
            {
                CustomerName = customerName,
                ReservationDateTime = reservationDate,
                NumberOfPeople = numberOfPeople
            };

            //adds successfully created reservation to list
            ReservationService.AddReservation(reservation);
            UpdateReservations();

            // Clear input fields
            customerName = string.Empty;
            reservationDate = DateTime.Today;
            numberOfPeople = 0;
        }
        catch (Exception ex)
        {
            Application.Current.MainPage.DisplayAlert("Error", ex.Message, "OK");
        }
    }

    private void UpdateReservations()
    {
        reservations = ReservationService.GetReservations().ToList();
    }

    //updates reservations on intialization
    protected override void OnInitialized()
    {
        UpdateReservations();
    }

}


